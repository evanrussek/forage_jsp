plot(full_plot)
# block number 9 is coded too many times...
library(ggpubr)
tt_data <- task_data %>% group_by(s_num,safe_val_base,trigger_val_base, p_trigger) %>% summarise(n_accept = sum(accept == 1), nt = n(), prop_accept = sum(accept == 1)/n())
s1dat = tt_data %>% filter(s_num == 1)
pos_plot <- ggplot(s1dat %>% filter(trigger_val_base > 0), aes(x = p_trigger, y = prop_accept, color = as.factor(safe_val_base))) + facet_wrap(~trigger_val_base) + geom_point(size = 2) + geom_line(size = 1.5)
neg_plot <- ggplot(s1dat %>% filter(trigger_val_base < 0), aes(x = p_trigger, y = prop_accept, color = as.factor(safe_val_base))) + facet_wrap(~trigger_val_base) + geom_point(size = 2) + geom_line(size = 1.5) + theme_minimal()
full_plot <- ggarrange(pos_plot,neg_plot, nrow = 2, ncol = 1)
plot(full_plot)
# block number 9 is coded too many times...
library(ggpubr)
tt_data <- task_data %>% group_by(s_num,safe_val_base,trigger_val_base, p_trigger) %>% summarise(n_accept = sum(accept == 1), nt = n(), prop_accept = sum(accept == 1)/n())
s1dat = tt_data %>% filter(s_num == 1)
pos_plot <- ggplot(s1dat %>% filter(trigger_val_base > 0), aes(x = p_trigger, y = prop_accept, color = as.factor(safe_val_base))) + facet_wrap(~trigger_val_base) + geom_point(size = 2) + geom_line(size = 1.5) + theme_minimal()
neg_plot <- ggplot(s1dat %>% filter(trigger_val_base < 0), aes(x = p_trigger, y = prop_accept, color = as.factor(safe_val_base))) + facet_wrap(~trigger_val_base) + geom_point(size = 2) + geom_line(size = 1.5) + theme_minimal()
full_plot <- ggarrange(pos_plot,neg_plot, nrow = 2, ncol = 1)
plot(full_plot)
# block number 9 is coded too many times...
library(ggpubr)
tt_data <- task_data %>% group_by(s_num,safe_val_base,trigger_val_base, p_trigger) %>% summarise(n_accept = sum(accept == 1), nt = n(), prop_accept = sum(accept == 1)/n())
s <-1
s1dat = tt_data %>% filter(s_num == s)
pos_plot <- ggplot(s1dat %>% filter(trigger_val_base > 0), aes(x = p_trigger, y = prop_accept, color = as.factor(safe_val_base))) + facet_wrap(~trigger_val_base) + geom_point(size = 2) + geom_line(size = 1.5) + theme_minimal()
neg_plot <- ggplot(s1dat %>% filter(trigger_val_base < 0), aes(x = p_trigger, y = prop_accept, color = as.factor(safe_val_base))) + facet_wrap(~trigger_val_base) + geom_point(size = 2) + geom_line(size = 1.5) + theme_minimal()
full_plot <- ggarrange(pos_plot,neg_plot, nrow = 2, ncol = 1)
full_plot <- annotate_figuer(full_plot, top = paste('subj: ', s))
library(ggpubr)
tt_data <- task_data %>% group_by(s_num,safe_val_base,trigger_val_base, p_trigger) %>% summarise(n_accept = sum(accept == 1), nt = n(), prop_accept = sum(accept == 1)/n())
s <-1
s1dat = tt_data %>% filter(s_num == s)
pos_plot <- ggplot(s1dat %>% filter(trigger_val_base > 0), aes(x = p_trigger, y = prop_accept, color = as.factor(safe_val_base))) + facet_wrap(~trigger_val_base) + geom_point(size = 2) + geom_line(size = 1.5) + theme_minimal()
neg_plot <- ggplot(s1dat %>% filter(trigger_val_base < 0), aes(x = p_trigger, y = prop_accept, color = as.factor(safe_val_base))) + facet_wrap(~trigger_val_base) + geom_point(size = 2) + geom_line(size = 1.5) + theme_minimal()
full_plot <- ggarrange(pos_plot,neg_plot, nrow = 2, ncol = 1)
full_plot <- annotate_figure(full_plot, top = paste('subj: ', s))
plot(full_plot)
# block number 9 is coded too many times...
# plot proportion accept as a function of changing probability,
library(ggpubr)
tt_data <- task_data %>% group_by(s_num,safe_val_base,trigger_val_base, p_trigger) %>% summarise(n_accept = sum(accept == 1), nt = n(), prop_accept = sum(accept == 1)/n())
for (s in 1:20){
s1dat = tt_data %>% filter(s_num == s)
pos_plot <- ggplot(s1dat %>% filter(trigger_val_base > 0), aes(x = p_trigger, y = prop_accept, color = as.factor(safe_val_base))) + facet_wrap(~trigger_val_base) + geom_point(size = 2) + geom_line(size = 1.5) + theme_minimal()
neg_plot <- ggplot(s1dat %>% filter(trigger_val_base < 0), aes(x = p_trigger, y = prop_accept, color = as.factor(safe_val_base))) + facet_wrap(~trigger_val_base) + geom_point(size = 2) + geom_line(size = 1.5) + theme_minimal()
full_plot <- ggarrange(pos_plot,neg_plot, nrow = 2, ncol = 1)
full_plot <- annotate_figure(full_plot, top = paste('subj: ', s))
plot(full_plot)
}
# block number 9 is coded too many times...
# plot proportion accept as a function of changing probability,
library(ggpubr)
tt_data <- task_data %>% group_by(s_num,safe_val_base,trigger_val_base, p_trigger) %>% summarise(n_accept = sum(accept == 1), nt = n(), prop_accept = sum(accept == 1)/n())
for (s in 1:20){
s1dat = tt_data %>% filter(s_num == s)
pos_plot <- ggplot(s1dat %>% filter(trigger_val_base > 0), aes(x = p_trigger, y = prop_accept, color = as.factor(safe_val_base))) + facet_wrap(~trigger_val_base) + geom_point(size = 2) + geom_line(size = 1.5) + theme_minimal() + ylim(0,1)                                                                                                                                                                                                                 )
# plot proportion accept as a function of changing probability,
library(ggpubr)
tt_data <- task_data %>% group_by(s_num,safe_val_base,trigger_val_base, p_trigger) %>% summarise(n_accept = sum(accept == 1), nt = n(), prop_accept = sum(accept == 1)/n())
for (s in 1:20){
s1dat = tt_data %>% filter(s_num == s)
pos_plot <- ggplot(s1dat %>% filter(trigger_val_base > 0), aes(x = p_trigger, y = prop_accept, color = as.factor(safe_val_base))) + facet_wrap(~trigger_val_base) + geom_point(size = 2) + geom_line(size = 1.5) + theme_minimal() + ylim(0,1)
neg_plot <- ggplot(s1dat %>% filter(trigger_val_base < 0), aes(x = p_trigger, y = prop_accept, color = as.factor(safe_val_base))) + facet_wrap(~trigger_val_base) + geom_point(size = 2) + geom_line(size = 1.5) + theme_minimal() + ylim(0,1)
full_plot <- ggarrange(pos_plot,neg_plot, nrow = 2, ncol = 1)
full_plot <- annotate_figure(full_plot, top = paste('subj: ', s))
plot(full_plot)
}
## compute grand means of this...
sdata <- task_data %>% group_by(safe_val_base,trigger_val_base, p_trigger) %>% summarise(gprop_accept = mean(prop_accept))
## compute grand means of this...
sdata <- tt_data %>% group_by(safe_val_base,trigger_val_base, p_trigger) %>% summarise(gprop_accept = mean(prop_accept))
## compute grand means of this...
sdata <- tt_data %>% group_by(safe_val_base,trigger_val_base, p_trigger) %>% summarise(gprop_accept = mean(prop_accept))
pos_plot <- ggplot(sdata, aes(x = p_trigger, y = prop_accept, color = as.factor(safe_val_base))) + facet_wrap(~trigger_val_base) + geom_point(size = 2) + geom_line(size = 1.5) + theme_minimal() + ylim(0,1)
neg_plot <- ggplot(sdata, aes(x = p_trigger, y = prop_accept, color = as.factor(safe_val_base))) + facet_wrap(~trigger_val_base) + geom_point(size = 2) + geom_line(size = 1.5) + theme_minimal() + ylim(0,1)
full_plot <- ggarrange(pos_plot,neg_plot, nrow = 2, ncol = 1)
## compute grand means of this...
sdata <- tt_data %>% group_by(safe_val_base,trigger_val_base, p_trigger) %>% summarise(prop_accept = mean(prop_accept))
pos_plot <- ggplot(sdata, aes(x = p_trigger, y = prop_accept, color = as.factor(safe_val_base))) + facet_wrap(~trigger_val_base) + geom_point(size = 2) + geom_line(size = 1.5) + theme_minimal() + ylim(0,1)
neg_plot <- ggplot(sdata, aes(x = p_trigger, y = prop_accept, color = as.factor(safe_val_base))) + facet_wrap(~trigger_val_base) + geom_point(size = 2) + geom_line(size = 1.5) + theme_minimal() + ylim(0,1)
full_plot <- ggarrange(pos_plot,neg_plot, nrow = 2, ncol = 1)
full_plot <- annotate_figure(full_plot, top = 'group')
plot(full_plot)
## compute grand means of this...
sdata <- tt_data %>% group_by(safe_val_base,trigger_val_base, p_trigger) %>% summarise(prop_accept = mean(prop_accept))
pos_plot <- ggplot(sdata, aes(x = p_trigger, y = prop_accept, color = as.factor(safe_val_base))) + facet_wrap(~trigger_val_base) + geom_point(size = 2) + geom_line(size = 1.5) + theme_minimal() + ylim(0,1)
neg_plot <- ggplot(sdata, aes(x = p_trigger, y = prop_accept, color = as.factor(safe_val_base))) + facet_wrap(~trigger_val_base) + geom_point(size = 2) + geom_line(size = 1.5) + theme_minimal() + ylim(0,1)
full_plot <- ggarrange(pos_plot,neg_plot, nrow = 2, ncol = 1)
#full_plot <- annotate_figure(full_plot, top = 'group')
#plot(full_plot)
## compute grand means of this...
sdata <- tt_data %>% group_by(safe_val_base,trigger_val_base, p_trigger) %>% summarise(prop_accept = mean(prop_accept))
pos_plot <- ggplot(sdata, aes(x = p_trigger, y = prop_accept, color = as.factor(safe_val_base))) + facet_wrap(~trigger_val_base) + geom_point(size = 2) + geom_line(size = 1.5) + theme_minimal() + ylim(0,1)
neg_plot <- ggplot(sdata, aes(x = p_trigger, y = prop_accept, color = as.factor(safe_val_base))) + facet_wrap(~trigger_val_base) + geom_point(size = 2) + geom_line(size = 1.5) + theme_minimal() + ylim(0,1)
full_plot <- ggarrange(pos_plot,neg_plot, nrow = 2, ncol = 1)
#full_plot <- annotate_figure(full_plot, top = 'group')
plot(full_plot)
## compute grand means of this...
sdata <- tt_data %>% group_by(safe_val_base,trigger_val_base, p_trigger) %>% summarise(prop_accept = mean(prop_accept))
pos_plot <- ggplot(sdata %>% filter(trigger_val_base > 0), aes(x = p_trigger, y = prop_accept, color = as.factor(safe_val_base))) + facet_wrap(~trigger_val_base) + geom_point(size = 2) + geom_line(size = 1.5) + theme_minimal() + ylim(0,1)
neg_plot <- ggplot(sdata, aes(x = p_trigger %>% filter(trigger_val_base < 0), y = prop_accept, color = as.factor(safe_val_base))) + facet_wrap(~trigger_val_base) + geom_point(size = 2) + geom_line(size = 1.5) + theme_minimal() + ylim(0,1)
full_plot <- ggarrange(pos_plot,neg_plot, nrow = 2, ncol = 1)
## compute grand means of this...
sdata <- tt_data %>% group_by(safe_val_base,trigger_val_base, p_trigger) %>% summarise(prop_accept = mean(prop_accept))
pos_plot <- ggplot(sdata %>% filter(trigger_val_base > 0), aes(x = p_trigger, y = prop_accept, color = as.factor(safe_val_base))) + facet_wrap(~trigger_val_base) + geom_point(size = 2) + geom_line(size = 1.5) + theme_minimal() + ylim(0,1)
neg_plot <- ggplot(sdata, aes(x = p_trigger %>% filter(trigger_val_base < 0), y = prop_accept, color = as.factor(safe_val_base))) + facet_wrap(~trigger_val_base) + geom_point(size = 2) + geom_line(size = 1.5) + theme_minimal() + ylim(0,1)
full_plot <- ggarrange(pos_plot,neg_plot, nrow = 2, ncol = 1)
## compute grand means of this...
sdata <- tt_data %>% group_by(safe_val_base,trigger_val_base, p_trigger) %>% summarise(prop_accept = mean(prop_accept))
pos_plot <- ggplot(sdata %>% filter(trigger_val_base > 0), aes(x = p_trigger, y = prop_accept, color = as.factor(safe_val_base))) + facet_wrap(~trigger_val_base) + geom_point(size = 2) + geom_line(size = 1.5) + theme_minimal() + ylim(0,1)
neg_plot <- ggplot(sdata %>% filter(trigger_val_base < 0), aes(x = p_trigger, y = prop_accept, color = as.factor(safe_val_base))) + facet_wrap(~trigger_val_base) + geom_point(size = 2) + geom_line(size = 1.5) + theme_minimal() + ylim(0,1)
full_plot <- ggarrange(pos_plot,neg_plot, nrow = 2, ncol = 1)
full_plot <- annotate_figure(full_plot, top = 'group')
plot(full_plot)
sdata
?is.na
## compute grand means of this...
sdata <- tt_data %>% group_by(safe_val_base,trigger_val_base, p_trigger) %>% summarise(prop_accept = sum(prop_accept)/sum(!is.na(prop_accept)))
pos_plot <- ggplot(sdata %>% filter(trigger_val_base > 0), aes(x = p_trigger, y = prop_accept, color = as.factor(safe_val_base))) + facet_wrap(~trigger_val_base) + geom_point(size = 2) + geom_line(size = 1.5) + theme_minimal() + ylim(0,1)
neg_plot <- ggplot(sdata %>% filter(trigger_val_base < 0), aes(x = p_trigger, y = prop_accept, color = as.factor(safe_val_base))) + facet_wrap(~trigger_val_base) + geom_point(size = 2) + geom_line(size = 1.5) + theme_minimal() + ylim(0,1)
full_plot <- ggarrange(pos_plot,neg_plot, nrow = 2, ncol = 1)
full_plot <- annotate_figure(full_plot, top = 'group')
plot(full_plot)
## compute grand means of this...
sdata <- tt_data %>% group_by(safe_val_base,trigger_val_base, p_trigger) %>% summarise(prop_accept = sum(prop_accept, na.rm = TRUE)/sum(!is.na(prop_accept)))
pos_plot <- ggplot(sdata %>% filter(trigger_val_base > 0), aes(x = p_trigger, y = prop_accept, color = as.factor(safe_val_base))) + facet_wrap(~trigger_val_base) + geom_point(size = 2) + geom_line(size = 1.5) + theme_minimal() + ylim(0,1)
neg_plot <- ggplot(sdata %>% filter(trigger_val_base < 0), aes(x = p_trigger, y = prop_accept, color = as.factor(safe_val_base))) + facet_wrap(~trigger_val_base) + geom_point(size = 2) + geom_line(size = 1.5) + theme_minimal() + ylim(0,1)
full_plot <- ggarrange(pos_plot,neg_plot, nrow = 2, ncol = 1)
full_plot <- annotate_figure(full_plot, top = 'group')
plot(full_plot)
head(task_data)
## some stats...
library(lmerTest)
# just do the win
gain_data <- task_data %>% filter(gl_type == 'gain)
## some stats...
library(lmerTest)
# just do the win
gain_data <- task_data %>% filter(gl_type == 'gain')
## some stats...
library(lmerTest)
# just do the win
gain_data <- task_data %>% filter(gl_type == 'gain')
glmer(accept ~ safe_val_actual + trigger_val_actual + p_trigger +
(1 + safe_val_actual + trigger_val_actual + p_trigger | subj))
## some stats...
library(lmerTest)
# just do the win
gain_data <- task_data %>% filter(gl_type == 'gain')
gain_model <- glmer(accept ~ safe_val_actual + trigger_val_actual + p_trigger +
(1 + safe_val_actual + trigger_val_actual + p_trigger | subj), data = gain_data)
## some stats...
library(lmerTest)
# just do the win
gain_data <- task_data %>% filter(gl_type == 'gain')
gain_model <- glmer(accept ~ safe_val_actual + trigger_val_actual + p_trigger +
(1 + safe_val_actual + trigger_val_actual + p_trigger | s_num), data = gain_data)
## some stats...
library(lmerTest)
# just do the win
gain_data <- task_data %>% filter(gl_type == 'gain')
gain_model <- glmer(accept ~ safe_val_actual + trigger_val_actual + p_trigger +
(1 + safe_val_actual + trigger_val_actual + p_trigger | s_num), data = gain_data ,family = binomial)
summary(gain_model)
## some stats...
library(lmerTest)
# just do the win
gain_data <- task_data %>% filter(gl_type == 'gain')
gain_data$p_trigger_mult <- 10*gain_data$p_trigger
gain_model <- glmer(accept ~ safe_val_actual + trigger_val_actual + p_trigger_mult +
(1 + safe_val_actual + trigger_val_actual + p_trigger_mult | s_num), data = gain_data ,family = binomial(link = "logit"))
summary(gain_model)
loss_data <- task_data %>% filter(gl_type == 'loss')
loss_model <- glmer(accept ~ safe_val_actual + trigger_val_actual + p_trigger +
(1 + safe_val_actual + trigger_val_actual + p_trigger | s_num), data = loss_data ,family = binomial(link = "logit"))
loss_data <- task_data %>% filter(gl_type == 'loss')
loss_data$p_trigger_mult <- 100*loss_data$p_trigger
loss_model <- glmer(accept ~ safe_val_actual + trigger_val_actual + p_trigger_mult) +
(1 + safe_val_actual + trigger_val_actual + p_trigger_mult | s_num), data = loss_data ,family = binomial(link = "logit"))
loss_data <- task_data %>% filter(gl_type == 'loss')
loss_data$p_trigger_mult <- 100*loss_data$p_trigger
loss_model <- glmer(accept ~ safe_val_actual + trigger_val_actual + p_trigger_mult +
(1 + safe_val_actual + trigger_val_actual + p_trigger_mult | s_num), data = loss_data ,family = binomial(link = "logit"))
summary(loss_model)
task$data$safe_val_actual
task_data$safe_val_actual
task_data$safe_val_actual %>% unique()
task_data$trigger_val_actual
task_data$trigger_val_actual %>% unique()
?isSingular
using Pkg
=======
harvest_lag <- round_filt_lag %>% ungroup() %>% filter(phase == "HARVEST") %>% mutate(subj = as.factor(s_num))
head(harvest_lag)
hl_model <- lmer(scale(mean_log_lag) ~  n_travel_steps + travel_key_cond + round_num  + (1 + n_travel_steps+ travel_key_cond + round_num |subj), data = harvest_lag, control = lmerControl(optimizer ="optimx",optCtrl=list(method='nlminb')))
summary(hl_model)
library(broom.mixed)
td <- tidy(hl_model, conf.int = TRUE)
tdsome <- td %>% filter(term == 'n_travel_steps' | term == 'travel_key_condHARD' | term == 'round_num')
tdsome <- tdsome %>% mutate(parameter = case_when(term == 'n_travel_steps' ~ 'travel step', term == 'travel_key_condHARD' ~ 'travel effort cond', term == 'round_num' ~ 'round number'))
ggplot(tdsome, aes(estimate,parameter,color = parameter)) +
geom_point(size = 2)  +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), size = 1.2) + theme(legend.position = "none") + theme_minimal() + ylab('fixed effect') + xlab('estimate (# points)') + ggtitle('linear mixed effects model - effect on lag') + theme(axis.text.y = element_text(angle = 90, hjust = .5))
travel_lag <- round_filt_lag %>% ungroup() %>% filter(phase == "TRAVEL") %>% mutate(subj = as.factor(s_num))
tl_model <- lmer(scale(mean_log_lag) ~  n_travel_steps + travel_key_cond + round_num  + (1 + n_travel_steps+ travel_key_cond + round_num |subj), data = harvest_lag, control = lmerControl(optimizer ="optimx",optCtrl=list(method='nlminb')))
summary(tl_model)
travel_lag <- round_filt_lag %>% ungroup() %>% filter(phase == "TRAVEL") %>% mutate(subj = as.factor(s_num))
tl_model <- lmer(scale(mean_log_lag) ~  n_travel_steps + travel_key_cond + round_num  + (1 + n_travel_steps+ travel_key_cond + round_num |subj), data = travel_lag, control = lmerControl(optimizer ="optimx",optCtrl=list(method='nlminb')))
summary(tl_model)
travel_lag <- round_filt_lag %>% ungroup() %>% filter(phase == "TRAVEL") %>% mutate(subj = as.factor(s_num))
tl_model <- lmer(scale(mean_log_lag) ~  n_travel_steps + travel_key_cond + round_num  + trial_num + (1 + n_travel_steps+ travel_key_cond + round_num + trial_num |subj), data = travel_lag, control = lmerControl(optimizer ="optimx",optCtrl=list(method='nlminb')))
summary(tl_model)
# reaction times...
## a bit more sensible...
lag_data <- cdata %>% select(s_num, rep_number, travel_key_cond, n_travel_steps, phase, trial_num, lag, correct_key, round, trial_num) %>% mutate(log_lag = log(lag)) %>% group_by(s_num, trial_num, round, phase) %>% slice(-1) %>% ungroup() %>% mutate(subj = as.factor(s_num))
ggplot(lag_data, aes(x=lag)) + geom_histogram(binwidth = 10) + xlim(50,300) + facet_wrap( ~ s_num)
#ggplot(lag_data, aes(x=log_lag))  + geom_histogram(binwidth = .01) + facet_wrap( ~ s_num)
filt_lag <- lag_data %>% group_by(s_num) %>% filter(log_lag < (mean(log_lag) + 2*sd(log_lag)) , log_lag > (mean(log_lag) - 2*sd(log_lag))) %>% ungroup()
ggplot(filt_lag, aes(x=lag)) + geom_histogram(binwidth = 10)  + facet_wrap(~s_num) + xlim(50,350)
ggplot(filt_lag, aes(x=log_lag)) + geom_histogram(binwidth = .02) + facet_wrap(~s_num)
## with a run, plot the mean lag
round_filt_lag <- filt_lag %>%
group_by(s_num, n_travel_steps, travel_key_cond, round, phase) %>%
summarise(trial_num = first(trial_num), mean_lag = mean(lag), mean_log_lag = mean(log_lag)) %>% mutate(round_num = as.integer(as.character(round)))
for (s in 1:22){
# plot mean lag as a function of round number
p <- ggplot(round_filt_lag %>% filter(s_num == s), aes(x = round_num, y = mean_log_lag, color = phase)) + geom_point(size = 2) +facet_grid(n_travel_steps ~ travel_key_cond) + geom_line(size = 1.2)  + xlab('harvest/travel number') + ylab('mean log lag') + ggtitle(paste('subj: ', s)) + theme_minimal()
plot(p)
}
library(plotrix)
cond_round_filt_lag <- round_filt_lag %>%
group_by(n_travel_steps, travel_key_cond, round_num, phase) %>%
summarise(mean_log_lag = mean(mean_log_lag), sd_lag = std.error(mean_log_lag))
p <- ggplot(cond_round_filt_lag, aes(x = round_num, y = mean_log_lag, color = phase)) + geom_point(size = 2) +facet_grid(n_travel_steps ~ travel_key_cond) + geom_line(size = 1.2) + geom_linerange(aes(ymin = mean_log_lag - sd_lag, ymax = mean_log_lag + sd_lag)) +
xlab('harvest/travel number') + ylab('mean log lag') + ggtitle('group: ') +  theme_minimal()
plot(p)
## with a run, plot the mean lag
round_filt_lag <- filt_lag %>%
group_by(s_num, n_travel_steps, travel_key_cond, round, phase) %>%
summarise(trial_num = first(trial_num), mean_lag = mean(lag), mean_log_lag = mean(log_lag)) %>% mutate(round_num = as.integer(as.character(round)))
for (s in 1:22){
# plot mean lag as a function of round number
p <- ggplot(round_filt_lag %>% filter(s_num == s), aes(x = round_num, y = mean_log_lag, color = phase)) + geom_point(size = 2) +facet_grid(n_travel_steps ~ travel_key_cond) + geom_line(size = 1.2)  + xlab('harvest/travel number') + ylab('mean log lag') + ggtitle(paste('subj: ', s)) + theme_minimal()
plot(p)
}
library(plotrix)
cond_round_filt_lag <- round_filt_lag %>%
group_by(n_travel_steps, travel_key_cond, round_num, phase) %>%
summarise(mean_log_lag = mean(mean_log_lag), sd_lag = std.error(mean_log_lag))
p <- ggplot(cond_round_filt_lag, aes(x = round_num, y = mean_log_lag, color = phase)) + geom_point(size = 2) +facet_grid(n_travel_steps ~ travel_key_cond) + geom_line(size = 1.2) + geom_linerange(aes(ymin = mean_log_lag - sd_lag, ymax = mean_log_lag + sd_lag)) +
xlab('harvest/travel number') + ylab('mean log lag') + ggtitle('group: ') +  theme_minimal()
plot(p)
travel_lag <- round_filt_lag %>% ungroup() %>% filter(phase == "TRAVEL") %>% mutate(subj = as.factor(s_num))
tl_model <- lmer(scale(mean_log_lag) ~  n_travel_steps + travel_key_cond + round_num  + trial_num + (1 + n_travel_steps+ travel_key_cond + round_num + trial_num |subj), data = travel_lag, control = lmerControl(optimizer ="optimx",optCtrl=list(method='nlminb')))
summary(tl_model)
travel_lag <- round_filt_lag %>% ungroup() %>% filter(phase == "TRAVEL") %>% mutate(subj = as.factor(s_num))
tl_model <- lmer(scale(mean_log_lag) ~  n_travel_steps*travel_key_cond + round_num  + trial_num + (1 + n_travel_steps*travel_key_cond + round_num + trial_num |subj), data = travel_lag, control = lmerControl(optimizer ="optimx",optCtrl=list(method='nlminb')))
summary(tl_model)
travel_lag <- round_filt_lag %>% ungroup() %>% filter(phase == "TRAVEL") %>% mutate(subj = as.factor(s_num))
tl_model <- lmer(scale(mean_log_lag) ~  n_travel_steps*travel_key_cond + round_num   + (1 + n_travel_steps*travel_key_cond + round_num  |subj), data = travel_lag, control = lmerControl(optimizer ="optimx",optCtrl=list(method='nlminb')))
summary(tl_model)
travel_lag <- round_filt_lag %>% ungroup() %>% filter(phase == "TRAVEL") %>% mutate(subj = as.factor(s_num))
tl_model <- lmer(scale(mean_log_lag) ~  n_travel_steps*travel_key_cond + round_num   + trial_num + (1 + n_travel_steps*travel_key_cond + round_num + trial_num |subj), data = travel_lag, control = lmerControl(optimizer ="optimx",optCtrl=list(method='nlminb')))
summary(tl_model)
travel_hard_lag <- round_filt_lag %>% ungroup() %>% filter(phase == "TRAVEL", travel_key_cond == "HARD") %>% mutate(subj = as.factor(s_num))
thl_model <- lmer(scale(mean_log_lag) ~  n_travel_steps + round_num   + trial_num + (1 + n_travel_steps + round_num + trial_num |subj), data = travel_hard_lag, control = lmerControl(optimizer ="optimx",optCtrl=list(method='nlminb')))
summary(thl_model)
library(broom.mixed)
td <- tidy(thl_model, conf.int = TRUE)
tdsome <- td %>% filter(term == 'n_travel_steps' | term == 'travel_key_condHARD' | term == 'round_num' | term == "trial_num")
tdsome <- tdsome %>% mutate(parameter = case_when(term == 'n_travel_steps' ~ 'travel step', term == 'travel_key_condHARD' ~ 'travel effort cond', term == 'round_num' ~ 'round number', term == 'trial_number' ~ 'trial_number'))
ggplot(tdsome, aes(estimate,parameter,color = parameter)) +
geom_point(size = 2)  +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), size = 1.2) + theme(legend.position = "none") + theme_minimal() + ylab('fixed effect') + xlab('sd log lag') + ggtitle('linear mixed effects model - effect on lag') + theme(axis.text.y = element_text(angle = 90, hjust = .5))
library(broom.mixed)
td <- tidy(thl_model, conf.int = TRUE)
tdsome <- td %>% filter(term == 'n_travel_steps' | term == 'travel_key_condHARD' | term == 'round_num' | term == "trial_num")
tdsome <- tdsome %>% mutate(parameter = case_when(term == 'n_travel_steps' ~ 'travel step', term == 'travel_key_condHARD' ~ 'travel effort cond', term == 'round_num' ~ 'round number', term == 'trial_num' ~ 'trial number'))
ggplot(tdsome, aes(estimate,parameter,color = parameter)) +
geom_point(size = 2)  +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), size = 1.2) + theme(legend.position = "none") + theme_minimal() + ylab('fixed effect') + xlab('sd log lag') + ggtitle('linear mixed effects model - effect on lag') + theme(axis.text.y = element_text(angle = 90, hjust = .5))
library(broom.mixed)
td <- tidy(thl_model, conf.int = TRUE)
tdsome <- td %>% filter(term == 'n_travel_steps' | term == 'travel_key_condHARD' | term == 'round_num' | term == "trial_num")
tdsome <- tdsome %>% mutate(parameter = case_when(term == 'n_travel_steps' ~ 'travel step', term == 'travel_key_condHARD' ~ 'travel effort cond', term == 'round_num' ~ 'round number', term == 'trial_num' ~ 'trial number'))
ggplot(tdsome, aes(estimate,parameter,color = parameter)) +
geom_point(size = 2)  +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), size = 1.2) + theme(legend.position = "none") + theme_minimal() + ylab('fixed effect') + xlab('sd log lag') + ggtitle('linear mixed effects model - effect on lag') + theme(axis.text.y = element_text(angle = 90, hjust = .5))
library(broom.mixed)
td <- tidy(thl_model, conf.int = TRUE)
tdsome <- td %>% filter(term == 'n_travel_steps' | term == 'travel_key_condHARD' | term == 'round_num' | term == "trial_num")
tdsome <- tdsome %>% mutate(parameter = case_when(term == 'n_travel_steps' ~ 'travel step', term == 'travel_key_condHARD' ~ 'travel effort cond', term == 'round_num' ~ 'round number', term == 'trial_num' ~ 'trial number'))
ggplot(tdsome, aes(estimate,parameter,color = parameter)) +
geom_point(size = 2)  +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), size = 1.2) + theme(legend.position = "none") + theme_minimal() + ylab('fixed effect') + xlab('sd log lag') + ggtitle('linear mixed effects model - effect on lag - hard travel trials') + theme(axis.text.y = element_text(angle = 90, hjust = .5))
library(broom.mixed)
td <- tidy(thl_model, conf.int = TRUE)
tdsome <- td %>% filter(term == 'n_travel_steps' | term == 'travel_key_condHARD' | term == 'round_num' | term == "trial_num")
tdsome <- tdsome %>% mutate(parameter = case_when(term == 'n_travel_steps' ~ 'travel step', term == 'travel_key_condHARD' ~ 'travel effort cond', term == 'round_num' ~ 'round number', term == 'trial_num' ~ 'trial number'))
ggplot(tdsome, aes(estimate,parameter,color = parameter)) +
geom_point(size = 2)  +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), size = 1.2) + theme(legend.position = "none") + theme_minimal() + ylab('fixed effect') + xlab('sd log lag') + ggtitle('linear mixed effects model - effect on lag - hard travel presses') + theme(axis.text.y = element_text(angle = 90, hjust = .5))
library(broom.mixed)
td <- tidy(hl_model, conf.int = TRUE)
tdsome <- td %>% filter(term == 'n_travel_steps' | term == 'travel_key_condHARD' | term == 'round_num' | term == 'trial_num')
tdsome <- tdsome %>% mutate(parameter = case_when(term == 'n_travel_steps' ~ 'travel step', term == 'travel_key_condHARD' ~ 'travel effort cond', term == 'round_num' ~ 'round number', term == 'trial_num' ~ 'trial_num'))
ggplot(tdsome, aes(estimate,parameter,color = parameter)) +
geom_point(size = 2)  +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), size = 1.2) + theme(legend.position = "none") + theme_minimal() + ylab('fixed effect') + xlab('estimate (# points)') + ggtitle('linear mixed effects model - effect on lag - harvest presses') + theme(axis.text.y = element_text(angle = 90, hjust = .5))
harvest_lag <- round_filt_lag %>% ungroup() %>% filter(phase == "HARVEST") %>% mutate(subj = as.factor(s_num))
head(harvest_lag)
hl_model <- lmer(scale(mean_log_lag) ~  n_travel_steps + travel_key_cond + round_num  + trial_num + (1 + n_travel_steps+ travel_key_cond + round_num + trial_num |subj), data = harvest_lag, control = lmerControl(optimizer ="optimx",optCtrl=list(method='nlminb')))
summary(hl_model)
library(broom.mixed)
td <- tidy(hl_model, conf.int = TRUE)
tdsome <- td %>% filter(term == 'n_travel_steps' | term == 'travel_key_condHARD' | term == 'round_num' | term == 'trial_num')
tdsome <- tdsome %>% mutate(parameter = case_when(term == 'n_travel_steps' ~ 'travel step', term == 'travel_key_condHARD' ~ 'travel effort cond', term == 'round_num' ~ 'round number', term == 'trial_num' ~ 'trial number'))
ggplot(tdsome, aes(estimate,parameter,color = parameter)) +
geom_point(size = 2)  +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), size = 1.2) + theme(legend.position = "none") + theme_minimal() + ylab('fixed effect') + xlab('estimate (# points)') + ggtitle('linear mixed effects model - effect on lag - harvest presses') + theme(axis.text.y = element_text(angle = 90, hjust = .5))
travel_easy_lag <- round_filt_lag %>% ungroup() %>% filter(phase == "TRAVEL", travel_key_cond == "EASY") %>% mutate(subj = as.factor(s_num))
tel_model <- lmer(scale(mean_log_lag) ~  n_travel_steps + round_num   + trial_num + (1 + n_travel_steps + round_num + trial_num |subj), data = travel_easy_lag, control = lmerControl(optimizer ="optimx",optCtrl=list(method='nlminb')))
summary(tel_model)
td <- tidy(tel_model, conf.int = TRUE)
tdsome <- td %>% filter(term == 'n_travel_steps' | term == 'travel_key_condHARD' | term == 'round_num' | term == "trial_num")
tdsome <- tdsome %>% mutate(parameter = case_when(term == 'n_travel_steps' ~ 'travel step', term == 'travel_key_condHARD' ~ 'travel effort cond', term == 'round_num' ~ 'round number', term == 'trial_num' ~ 'trial number'))
ggplot(tdsome, aes(estimate,parameter,color = parameter)) +
geom_point(size = 2)  +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), size = 1.2) + theme(legend.position = "none") + theme_minimal() + ylab('fixed effect') + xlab('sd log lag') + ggtitle('linear mixed effects model - effect on lag - hard easy presses') + theme(axis.text.y = element_text(angle = 90, hjust = .5))
travel_easy_lag <- round_filt_lag %>% ungroup() %>% filter(phase == "TRAVEL", travel_key_cond == "EASY") %>% mutate(subj = as.factor(s_num))
tel_model <- lmer(scale(mean_log_lag) ~  n_travel_steps + round_num   + trial_num + (1 + n_travel_steps + round_num + trial_num |subj), data = travel_easy_lag, control = lmerControl(optimizer ="optimx",optCtrl=list(method='nlminb')))
summary(tel_model)
td <- tidy(tel_model, conf.int = TRUE)
tdsome <- td %>% filter(term == 'n_travel_steps' | term == 'travel_key_condHARD' | term == 'round_num' | term == "trial_num")
tdsome <- tdsome %>% mutate(parameter = case_when(term == 'n_travel_steps' ~ 'travel step', term == 'travel_key_condHARD' ~ 'travel effort cond', term == 'round_num' ~ 'round number', term == 'trial_num' ~ 'trial number'))
ggplot(tdsome, aes(estimate,parameter,color = parameter)) +
geom_point(size = 2)  +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), size = 1.2) + theme(legend.position = "none") + theme_minimal() + ylab('fixed effect') + xlab('sd log lag') + ggtitle('linear mixed effects model - effect on lag - travel easy presses') + theme(axis.text.y = element_text(angle = 90, hjust = .5))
library(broom.mixed)
td <- tidy(hl_model, conf.int = TRUE)
tdsome <- td %>% filter(term == 'n_travel_steps' | term == 'travel_key_condHARD' | term == 'round_num' | term == 'trial_num')
tdsome <- tdsome %>% mutate(parameter = case_when(term == 'n_travel_steps' ~ 'travel step', term == 'travel_key_condHARD' ~ 'travel effort cond', term == 'round_num' ~ 'round number', term == 'trial_num' ~ 'trial number'))
ggplot(tdsome, aes(estimate,parameter,color = parameter)) +
geom_point(size = 2)  +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), size = 1.2) + theme(legend.position = "none") + theme_minimal() + ylab('fixed effect') + xlab('estimate (sd log rt)') + ggtitle('linear mixed effects model - effect on lag - harvest presses') + theme(axis.text.y = element_text(angle = 90, hjust = .5))
travel_lag <- round_filt_lag %>% ungroup() %>% filter(phase == "TRAVEL") %>% mutate(subj = as.factor(s_num))
tl_model <- lmer(scale(mean_log_lag) ~  n_travel_steps*travel_key_cond + round_num   + trial_num + (1 + n_travel_steps*travel_key_cond + round_num + trial_num |subj), data = travel_lag, control = lmerControl(optimizer ="optimx",optCtrl=list(method='nlminb')))
summary(tl_model)
td <- tidy(tl_model, conf.int = TRUE)
tdsome <- td %>% filter(term == 'n_travel_steps' | term == 'travel_key_condHARD' | term == 'round_num' | term == "trial_num")
tdsome <- tdsome %>% mutate(parameter = case_when(term == 'n_travel_steps' ~ 'travel step', term == 'travel_key_condHARD' ~ 'travel effort cond', term == 'round_num' ~ 'round number', term == 'trial_num' ~ 'trial number'))
ggplot(tdsome, aes(estimate,parameter,color = parameter)) +
geom_point(size = 2)  +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), size = 1.2) + theme(legend.position = "none") + theme_minimal() + ylab('fixed effect') + xlab('sd log lag') + ggtitle('linear mixed effects model - effect on lag - travel easy presses') + theme(axis.text.y = element_text(angle = 90, hjust = .5))
travel_lag <- round_filt_lag %>% ungroup() %>% filter(phase == "TRAVEL") %>% mutate(subj = as.factor(s_num))
tl_model <- lmer(scale(mean_log_lag) ~  n_travel_steps*travel_key_cond + round_num   + trial_num + (1 + n_travel_steps*travel_key_cond + round_num + trial_num |subj), data = travel_lag, control = lmerControl(optimizer ="optimx",optCtrl=list(method='nlminb')))
summary(tl_model)
td <- tidy(tl_model, conf.int = TRUE)
tdsome <- td %>% filter(term == 'n_travel_steps' | term == 'travel_key_condHARD' | term == 'round_num' | term == "trial_num", term == "n_travel_steps:travel_key_condHARD")
tdsome <- tdsome %>% mutate(parameter = case_when(term == 'n_travel_steps' ~ 'travel step', term == 'travel_key_condHARD' ~ 'travel effort cond', term == 'round_num' ~ 'round number', term == 'trial_num' ~ 'trial number', term == 'n_travel_steps:travel_key_condHARD' ~ 'travel step x effort int'))
ggplot(tdsome, aes(estimate,parameter,color = parameter)) +
geom_point(size = 2)  +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), size = 1.2) + theme(legend.position = "none") + theme_minimal() + ylab('fixed effect') + xlab('sd log lag') + ggtitle('linear mixed effects model - effect on lag - travel easy presses') + theme(axis.text.y = element_text(angle = 90, hjust = .5))
tdsome
td
travel_lag <- round_filt_lag %>% ungroup() %>% filter(phase == "TRAVEL") %>% mutate(subj = as.factor(s_num))
tl_model <- lmer(scale(mean_log_lag) ~  n_travel_steps*travel_key_cond + round_num   + trial_num + (1 + n_travel_steps*travel_key_cond + round_num + trial_num |subj), data = travel_lag, control = lmerControl(optimizer ="optimx",optCtrl=list(method='nlminb')))
summary(tl_model)
td <- tidy(tl_model, conf.int = TRUE)
tdsome <- td %>% filter(term == 'n_travel_steps' | term == 'travel_key_condHARD' | term == 'round_num' | term == "trial_num" | term == "n_travel_steps:travel_key_condHARD")
tdsome <- tdsome %>% mutate(parameter = case_when(term == 'n_travel_steps' ~ 'travel step', term == 'travel_key_condHARD' ~ 'travel effort cond', term == 'round_num' ~ 'round number', term == 'trial_num' ~ 'trial number', term == 'n_travel_steps:travel_key_condHARD' ~ 'travel step x effort int'))
ggplot(tdsome, aes(estimate,parameter,color = parameter)) +
geom_point(size = 2)  +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), size = 1.2) + theme(legend.position = "none") + theme_minimal() + ylab('fixed effect') + xlab('sd log lag') + ggtitle('linear mixed effects model - effect on lag - travel easy presses') + theme(axis.text.y = element_text(angle = 90, hjust = .5))
travel_lag <- round_filt_lag %>% ungroup() %>% filter(phase == "TRAVEL") %>% mutate(subj = as.factor(s_num))
tl_model <- lmer(scale(mean_log_lag) ~  n_travel_steps*travel_key_cond + round_num   + trial_num + (1 + n_travel_steps*travel_key_cond + round_num + trial_num |subj), data = travel_lag, control = lmerControl(optimizer ="optimx",optCtrl=list(method='nlminb')))
summary(tl_model)
td <- tidy(tl_model, conf.int = TRUE)
tdsome <- td %>% filter(term == 'n_travel_steps' | term == 'travel_key_condHARD' | term == 'round_num' | term == "trial_num" | term == "n_travel_steps:travel_key_condHARD")
tdsome <- tdsome %>% mutate(parameter = case_when(term == 'n_travel_steps' ~ '# step', term == 'travel_key_condHARD' ~ 'effort', term == 'round_num' ~ 'round', term == 'trial_num' ~ 'trial', term == 'n_travel_steps:travel_key_condHARD' ~ '#step x effort'))
ggplot(tdsome, aes(estimate,parameter,color = parameter)) +
geom_point(size = 2)  +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), size = 1.2) + theme(legend.position = "none") + theme_minimal() + ylab('fixed effect') + xlab('sd log lag') + ggtitle('linear mixed effects model - effect on lag - travel easy presses') + theme(axis.text.y = element_text(angle = 90, hjust = .5))
travel_lag <- round_filt_lag %>% ungroup() %>% filter(phase == "TRAVEL") %>% mutate(subj = as.factor(s_num))
tl_model <- lmer(scale(mean_log_lag) ~  n_travel_steps*travel_key_cond + round_num   + trial_num + (1 + n_travel_steps*travel_key_cond + round_num + trial_num |subj), data = travel_lag, control = lmerControl(optimizer ="optimx",optCtrl=list(method='nlminb')))
summary(tl_model)
#term == 'travel_key_condHARD'
td <- tidy(tl_model, conf.int = TRUE)
tdsome <- td %>% filter(term == 'n_travel_steps'  | term == 'round_num' | term == "trial_num" | term == "n_travel_steps:travel_key_condHARD")
tdsome <- tdsome %>% mutate(parameter = case_when(term == 'n_travel_steps' ~ '# step', term == 'travel_key_condHARD' ~ 'effort', term == 'round_num' ~ 'round', term == 'trial_num' ~ 'trial', term == 'n_travel_steps:travel_key_condHARD' ~ '#step x effort'))
ggplot(tdsome, aes(estimate,parameter,color = parameter)) +
geom_point(size = 2)  +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), size = 1.2) + theme(legend.position = "none") + theme_minimal() + ylab('fixed effect') + xlab('sd log lag') + ggtitle('linear mixed effects model - effect on lag - travel') + theme(axis.text.y = element_text(angle = 90, hjust = .5))
# do some aggregating over exit thresholds...
# just get the mean for each subject for each timepoint, collapse accross rep number...
mn_exit <- exit_data %>% group_by(s_num, n_travel_steps, travel_key_cond) %>%
summarise(rep_exit_thresh = mean(last_reward), trial_num = mean(trial_num)) %>%
group_by(s_num, n_travel_steps, travel_key_cond) %>%
summarise(exit_thresh = mean(rep_exit_thresh), trial_num = mean(trial_num)) %>%
mutate(subj = as.factor(s_num)) %>% ungroup()
# now just plot this for each subject -- draw lines to show easy - hard effect
ggplot(mn_exit, aes(x = travel_key_cond, y = exit_thresh)) + geom_dotplot(binaxis = 'y', aes(fill = subj), dotsize = 1.2) + geom_line(aes(group = subj, color = subj), size = 1.2) +
facet_grid(.~n_travel_steps) + theme_minimal() + labs(y = 'Mean Last Reward Collected', x = 'Travel Sequence', subtitle = '# Travel Presses') #theme(legend.position = "none")
ggsave('reward_press2.png')
ggplot(mn_exit, aes(x = factor(n_travel_steps), y = exit_thresh)) +
geom_dotplot(binaxis = 'y', aes(fill = subj), dotsize = 1.2) +
geom_line(aes(group = subj, color = subj), size = 1.2) +
facet_grid(.~travel_key_cond) +
theme_dark() +
labs(y = 'Mean Last Reward Collected', x = 'Travel Key Condition', subtitle = '# Travel Presses')
#theme(legend.position = "none")
ggsave('reward_press.png')
# do some aggregating over exit thresholds...
# just get the mean for each subject for each timepoint, collapse accross rep number...
mn_exit <- exit_data %>% group_by(s_num, n_travel_steps, travel_key_cond) %>%
summarise(rep_exit_thresh = mean(last_reward), trial_num = mean(trial_num)) %>%
group_by(s_num, n_travel_steps, travel_key_cond) %>%
summarise(exit_thresh = mean(rep_exit_thresh), trial_num = mean(trial_num)) %>%
mutate(subj = as.factor(s_num)) %>% ungroup()
# now just plot this for each subject -- draw lines to show easy - hard effect
ggplot(mn_exit, aes(x = travel_key_cond, y = exit_thresh)) + geom_dotplot(binaxis = 'y', aes(fill = subj), dotsize = 1.2) + geom_line(aes(group = subj, color = subj), size = 1.2) +
facet_grid(.~n_travel_steps) + theme_minimal() + labs(y = 'Mean Last Reward Collected', x = 'Travel Sequence', subtitle = '# Travel Presses') #theme(legend.position = "none")
ggsave('reward_press2.png')
ggplot(mn_exit, aes(x = factor(n_travel_steps), y = exit_thresh)) +
geom_dotplot(binaxis = 'y', aes(fill = subj), dotsize = 1.2) +
geom_line(aes(group = subj, color = subj), size = 1.2) +
facet_grid(.~travel_key_cond) +
theme(
panel.background = element_rect(fill = "#21215f", colour = NA), # or theme_blank()
plot.background = element_rect(fill = "white",colour = NA),
panel.grid.minor = element_line("#736391", size = 0.1),
panel.grid.major = element_line("#ecc6d9", size = 0.1)) +
theme(axis.text=element_text(size=12, colour="black"),
axis.title=element_text(size=12,face="bold")) +
labs(y = 'Mean Last Reward Collected', x = 'Travel Key Condition', subtitle = '# Travel Presses')
#theme(legend.position = "none")
ggsave('reward_press.png')
# do some aggregating over exit thresholds...
# just get the mean for each subject for each timepoint, collapse accross rep number...
mn_exit <- exit_data %>% group_by(s_num, n_travel_steps, travel_key_cond) %>%
summarise(rep_exit_thresh = mean(last_reward), trial_num = mean(trial_num)) %>%
group_by(s_num, n_travel_steps, travel_key_cond) %>%
summarise(exit_thresh = mean(rep_exit_thresh), trial_num = mean(trial_num)) %>%
mutate(subj = as.factor(s_num)) %>% ungroup()
# now just plot this for each subject -- draw lines to show easy - hard effect
ggplot(mn_exit, aes(x = travel_key_cond, y = exit_thresh)) + geom_dotplot(binaxis = 'y', aes(fill = subj), dotsize = 1.2) + geom_line(aes(group = subj, color = subj), size = 1.2) +
facet_grid(.~n_travel_steps) + theme_minimal() + labs(y = 'Mean Last Reward Collected', x = 'Travel Sequence', subtitle = '# Travel Presses') #theme(legend.position = "none")
ggsave('reward_press2.png')
ggplot(mn_exit, aes(x = factor(n_travel_steps), y = exit_thresh)) +
geom_dotplot(binaxis = 'y', aes(fill = subj), dotsize = 1.2) +
geom_line(aes(group = subj, color = subj), size = 1.2) +
facet_grid(.~travel_key_cond) +
theme_bw() +
labs(y = 'Mean Last Reward Collected', x = 'Travel Key Condition', subtitle = '# Travel Presses')
#theme(legend.position = "none")
ggsave('reward_press.png')
# do some aggregating over exit thresholds...
# just get the mean for each subject for each timepoint, collapse accross rep number...
mn_exit <- exit_data %>% group_by(s_num, n_travel_steps, travel_key_cond) %>%
summarise(rep_exit_thresh = mean(last_reward), trial_num = mean(trial_num)) %>%
group_by(s_num, n_travel_steps, travel_key_cond) %>%
summarise(exit_thresh = mean(rep_exit_thresh), trial_num = mean(trial_num)) %>%
mutate(subj = as.factor(s_num)) %>% ungroup()
# now just plot this for each subject -- draw lines to show easy - hard effect
ggplot(mn_exit, aes(x = travel_key_cond, y = exit_thresh)) + geom_dotplot(binaxis = 'y', aes(fill = subj), dotsize = 1.2) + geom_line(aes(group = subj, color = subj), size = 1.2) +
facet_grid(.~n_travel_steps) + theme_minimal() + labs(y = 'Mean Last Reward Collected', x = 'Travel Sequence', subtitle = '# Travel Presses') #theme(legend.position = "none")
ggsave('reward_press2.png')
ggplot(mn_exit, aes(x = factor(n_travel_steps), y = exit_thresh)) +
geom_dotplot(binaxis = 'y', aes(fill = subj), dotsize = 1.2) +
geom_line(aes(group = subj, color = subj), size = 1.2) +
facet_grid(.~travel_key_cond) +
theme_classic() +
labs(y = 'Mean Last Reward Collected', x = 'Travel Key Condition', subtitle = '# Travel Presses')
#theme(legend.position = "none")
ggsave('reward_press.png')
# do some aggregating over exit thresholds...
# just get the mean for each subject for each timepoint, collapse accross rep number...
mn_exit <- exit_data %>% group_by(s_num, n_travel_steps, travel_key_cond) %>%
summarise(rep_exit_thresh = mean(last_reward), trial_num = mean(trial_num)) %>%
group_by(s_num, n_travel_steps, travel_key_cond) %>%
summarise(exit_thresh = mean(rep_exit_thresh), trial_num = mean(trial_num)) %>%
mutate(subj = as.factor(s_num)) %>% ungroup()
# now just plot this for each subject -- draw lines to show easy - hard effect
ggplot(mn_exit, aes(x = travel_key_cond, y = exit_thresh)) + geom_dotplot(binaxis = 'y', aes(fill = subj), dotsize = 1.2) + geom_line(aes(group = subj, color = subj), size = 1.2) +
facet_grid(.~n_travel_steps) + theme_minimal() + labs(y = 'Mean Last Reward Collected', x = 'Travel Sequence', subtitle = '# Travel Presses') #theme(legend.position = "none")
ggsave('reward_press2.png')
ggplot(mn_exit, aes(x = factor(n_travel_steps), y = exit_thresh)) +
geom_dotplot(binaxis = 'y', aes(fill = subj), dotsize = 1.2) +
geom_line(aes(group = subj, color = subj), size = 1.2) +
facet_grid(.~travel_key_cond) +
theme_linedraw() +
labs(y = 'Mean Last Reward Collected', x = 'Travel Key Condition', subtitle = '# Travel Presses')
#theme(legend.position = "none")
ggsave('reward_press.png')
# do some aggregating over exit thresholds...
# just get the mean for each subject for each timepoint, collapse accross rep number...
mn_exit <- exit_data %>% group_by(s_num, n_travel_steps, travel_key_cond) %>%
summarise(rep_exit_thresh = mean(last_reward), trial_num = mean(trial_num)) %>%
group_by(s_num, n_travel_steps, travel_key_cond) %>%
summarise(exit_thresh = mean(rep_exit_thresh), trial_num = mean(trial_num)) %>%
mutate(subj = as.factor(s_num)) %>% ungroup()
# now just plot this for each subject -- draw lines to show easy - hard effect
ggplot(mn_exit, aes(x = travel_key_cond, y = exit_thresh)) + geom_dotplot(binaxis = 'y', aes(fill = subj), dotsize = 1.2) + geom_line(aes(group = subj, color = subj), size = 1.2) +
facet_grid(.~n_travel_steps) + theme_minimal() + labs(y = 'Mean Last Reward Collected', x = 'Travel Sequence', subtitle = '# Travel Presses') #theme(legend.position = "none")
ggsave('reward_press2.png')
ggplot(mn_exit, aes(x = factor(n_travel_steps), y = exit_thresh)) +
geom_dotplot(binaxis = 'y', aes(fill = subj), dotsize = 1.2) +
geom_line(aes(group = subj, color = subj), size = 1.2) +
facet_grid(.~travel_key_cond) +
theme_gray() +
labs(y = 'Mean Last Reward Collected', x = 'Travel Key Condition', subtitle = '# Travel Presses')
#theme(legend.position = "none")
ggsave('reward_press.png')
>>>>>>> Stashed changes
